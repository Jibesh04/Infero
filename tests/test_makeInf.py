import pytest
# from torch import cat, tensor, Size
# import ultralytics.engine.results
from app.src.makeInf import predict, result_to_image
# from makeInf import predict, result_to_image
from PIL import Image
# import numpy as np
# import ultralytics
# from numpy import array, uint8

# def test_result_to_image():
#     # cls_tensor = tensor([ 0.,  0., 16., 16.,  1., 56., 56., 16.,  0., 56.,  1.,  0.,  0.,  9.,  9.,  0.,  9.,  0., 25., 25.,  0., 16., 24.,  0., 16., 56., 39.,  0., 25.,  0.,  0.,  0., 25.,  0., 25.,  0., 25.])  # Fill with your cls values
#     # conf_tensor = tensor([0.9148, 0.9013, 0.9006, 0.8975, 0.8556, 0.8229, 0.8108, 0.7817, 0.7714, 0.7597, 0.7447, 0.7309, 0.7112, 0.6783, 0.6778, 0.6104, 0.5887, 0.5732, 0.5669, 0.5148, 0.4636, 0.4443, 0.4148, 0.4128, 0.4023, 0.3847, 0.3772, 0.3665, 0.3574, 0.3346, 0.3307, 0.3279, 0.3259, 0.3152, 0.3098, 0.2862, 0.2833])  # Fill with your conf values
#     # data_tensor = tensor([[2.6855e+02, 2.3815e+02, 3.1744e+02, 3.8919e+02, 9.1476e-01, 0.0000e+00],
#     #             [4.5151e+02, 2.2838e+02, 5.0235e+02, 3.7051e+02, 9.0130e-01, 0.0000e+00],
#     #             [3.4542e+02, 3.3303e+02, 3.8299e+02, 3.8769e+02, 9.0062e-01, 1.6000e+01],
#     #             [3.4745e+02, 3.1363e+02, 3.9527e+02, 3.8146e+02, 8.9749e-01, 1.6000e+01],
#     #             [2.1563e+02, 2.7933e+02, 2.5642e+02, 3.3742e+02, 8.5564e-01, 1.0000e+00],
#     #             [9.8916e+01, 3.2485e+02, 1.4893e+02, 4.0808e+02, 8.2289e-01, 5.6000e+01],
#     #             [1.4412e+02, 3.0645e+02, 1.8329e+02, 3.7016e+02, 8.1084e-01, 5.6000e+01],
#     #             [3.0829e+02, 3.3547e+02, 3.4325e+02, 3.8885e+02, 7.8168e-01, 1.6000e+01],
#     #             [1.8257e+01, 2.8253e+02, 8.2009e+01, 4.1036e+02, 7.7138e-01, 0.0000e+00],
#     #             [1.4526e+01, 3.2809e+02, 6.7958e+01, 4.1668e+02, 7.5965e-01, 5.6000e+01],
#     #             [4.5655e+02, 2.9210e+02, 4.9975e+02, 3.8319e+02, 7.4469e-01, 1.0000e+00],
#     #             [7.7007e+01, 2.7198e+02, 1.4960e+02, 3.9914e+02, 7.3093e-01, 0.0000e+00],
#     #             [2.2052e+02, 2.5442e+02, 2.5790e+02, 3.2779e+02, 7.1119e-01, 0.0000e+00],
#     #             [4.2744e+02, 8.2139e+01, 4.3980e+02, 1.1625e+02, 6.7827e-01, 9.0000e+00],
#     #             [4.0491e+02, 8.0748e+01, 4.2175e+02, 1.1639e+02, 6.7780e-01, 9.0000e+00],
#     #             [5.2996e+00, 2.5576e+02, 2.7058e+01, 3.2248e+02, 6.1042e-01, 0.0000e+00],
#     #             [2.2137e+02, 6.4403e+01, 2.5143e+02, 1.0499e+02, 5.8866e-01, 9.0000e+00],
#     #             [1.7572e+02, 2.4741e+02, 1.9303e+02, 3.0015e+02, 5.7324e-01, 0.0000e+00],
#     #             [2.7345e+01, 1.4766e+02, 2.2654e+02, 2.2859e+02, 5.6686e-01, 2.5000e+01],
#     #             [3.8040e-01, 1.7247e+02, 1.4301e+02, 3.0361e+02, 5.1484e-01, 2.5000e+01],
#     #             [3.7852e+02, 2.4126e+02, 3.8970e+02, 2.7352e+02, 4.6361e-01, 0.0000e+00],
#     #             [2.1117e+02, 3.3013e+02, 2.7837e+02, 3.8846e+02, 4.4432e-01, 1.6000e+01],
#     #             [4.6126e+02, 2.4544e+02, 4.9350e+02, 2.7213e+02, 4.1481e-01, 2.4000e+01],
#     #             [8.8906e+01, 2.8253e+02, 1.2353e+02, 3.2171e+02, 4.1277e-01, 0.0000e+00],
#     #             [2.1118e+02, 3.3769e+02, 2.5957e+02, 3.8835e+02, 4.0227e-01, 1.6000e+01],
#     #             [3.3936e-02, 3.2864e+02, 2.1655e+01, 4.1380e+02, 3.8469e-01, 5.6000e+01],
#     #             [1.0253e+02, 3.0774e+02, 1.1099e+02, 3.2689e+02, 3.7721e-01, 3.9000e+01],
#     #             [3.3763e+02, 2.3719e+02, 3.4867e+02, 2.6543e+02, 3.6651e-01, 0.0000e+00],
#     #             [2.7129e+01, 1.4729e+02, 2.2847e+02, 3.2567e+02, 3.5737e-01, 2.5000e+01],
#     #             [3.4873e+01, 2.4723e+02, 5.9293e+01, 2.8993e+02, 3.3463e-01, 0.0000e+00],
#     #             [9.4965e+01, 2.4521e+02, 1.1448e+02, 2.8491e+02, 3.3069e-01, 0.0000e+00],
#     #             [1.5623e+02, 2.4465e+02, 1.7338e+02, 3.0169e+02, 3.2792e-01, 0.0000e+00],
#     #             [5.2063e-02, 1.7328e+02, 1.4233e+02, 2.4136e+02, 3.2593e-01, 2.5000e+01],
#     #             [3.5366e+02, 2.3826e+02, 3.6797e+02, 2.6807e+02, 3.1522e-01, 0.0000e+00],
#     #             [5.8175e+02, 1.5363e+02, 6.3974e+02, 2.1098e+02, 3.0985e-01, 2.5000e+01],
#     #             [6.0921e+02, 2.7774e+02, 6.3973e+02, 3.7378e+02, 2.8616e-01, 0.0000e+00],
#     #             [5.8198e+02, 1.5411e+02, 6.3973e+02, 3.7626e+02, 2.8327e-01, 2.5000e+01]])  # Fill with your data values
#     # xywh_tensor = tensor([[292.9955, 313.6705,  48.8816, 151.0338],
#     #             [476.9319, 299.4469,  50.8378, 142.1337],
#     #             [364.2097, 360.3633,  37.5703,  54.6583],
#     #             [371.3622, 347.5447,  47.8171,  67.8235],
#     #             [236.0260, 308.3745,  40.7925,  58.0869],
#     #             [123.9252, 366.4626,  50.0185,  83.2285],
#     #             [163.7031, 338.3064,  39.1741,  63.7052],
#     #             [325.7718, 362.1611,  34.9589,  53.3792],
#     #             [ 50.1330, 346.4464,  63.7514, 127.8238],
#     #             [ 41.2420, 372.3870,  53.4328,  88.5895],
#     #             [478.1523, 337.6468,  43.1989,  91.0955],
#     #             [113.3058, 335.5636,  72.5980, 127.1595],
#     #             [239.2083, 291.1036,  37.3819,  73.3660],
#     #             [433.6196,  99.1959,  12.3512,  34.1132],
#     #             [413.3330,  98.5683,  16.8375,  35.6408],
#     #             [ 16.1790, 289.1165,  21.7586,  66.7219],
#     #             [236.4000,  84.6945,  30.0678,  40.5838],
#     #             [184.3717, 273.7810,  17.3091,  52.7375],
#     #             [126.9448, 188.1262, 199.1989,  80.9290],
#     #             [ 71.6955, 238.0432, 142.6302, 131.1418],
#     #             [384.1091, 257.3913,  11.1751,  32.2596],
#     #             [244.7697, 359.2967,  67.1998,  58.3318],
#     #             [477.3800, 258.7835,  32.2426,  26.6892],
#     #             [106.2194, 302.1202,  34.6277,  39.1866],
#     #             [235.3721, 363.0191,  48.3859,  50.6600],
#     #             [ 10.8442, 371.2183,  21.6206,  85.1660],
#     #             [106.7575, 317.3188,   8.4622,  19.1520],
#     #             [343.1506, 251.3100,  11.0363,  28.2498],
#     #             [127.7988, 236.4812, 201.3402, 178.3804],
#     #             [ 47.0829, 268.5791,  24.4197,  42.6984],
#     #             [104.7235, 265.0627,  19.5167,  39.7017],
#     #             [164.8019, 273.1695,  17.1516,  57.0406],
#     #             [ 71.1889, 207.3192, 142.2736,  68.0730],
#     #             [360.8139, 253.1621,  14.3105,  29.8122],
#     #             [610.7449, 182.3039,  57.9880,  57.3448],
#     #             [624.4695, 325.7629,  30.5114,  96.0385],
#     #             [610.8553, 265.1844,  57.7543, 222.1576]])  # Fill with your xywh values
#     # xywhn_tensor = tensor([[0.4578, 0.7363, 0.0764, 0.3545],
#     #             [0.7452, 0.7029, 0.0794, 0.3336],
#     #             [0.5691, 0.8459, 0.0587, 0.1283],
#     #             [0.5803, 0.8158, 0.0747, 0.1592],
#     #             [0.3688, 0.7239, 0.0637, 0.1364],
#     #             [0.1936, 0.8602, 0.0782, 0.1954],
#     #             [0.2558, 0.7941, 0.0612, 0.1495],
#     #             [0.5090, 0.8501, 0.0546, 0.1253],
#     #             [0.0783, 0.8133, 0.0996, 0.3001],
#     #             [0.0644, 0.8741, 0.0835, 0.2080],
#     #             [0.7471, 0.7926, 0.0675, 0.2138],
#     #             [0.1770, 0.7877, 0.1134, 0.2985],
#     #             [0.3738, 0.6833, 0.0584, 0.1722],
#     #             [0.6775, 0.2329, 0.0193, 0.0801],
#     #             [0.6458, 0.2314, 0.0263, 0.0837],
#     #             [0.0253, 0.6787, 0.0340, 0.1566],
#     #             [0.3694, 0.1988, 0.0470, 0.0953],
#     #             [0.2881, 0.6427, 0.0270, 0.1238],
#     #             [0.1984, 0.4416, 0.3112, 0.1900],
#     #             [0.1120, 0.5588, 0.2229, 0.3078],
#     #             [0.6002, 0.6042, 0.0175, 0.0757],
#     #             [0.3825, 0.8434, 0.1050, 0.1369],
#     #             [0.7459, 0.6075, 0.0504, 0.0627],
#     #             [0.1660, 0.7092, 0.0541, 0.0920],
#     #             [0.3678, 0.8522, 0.0756, 0.1189],
#     #             [0.0169, 0.8714, 0.0338, 0.1999],
#     #             [0.1668, 0.7449, 0.0132, 0.0450],
#     #             [0.5362, 0.5899, 0.0172, 0.0663],
#     #             [0.1997, 0.5551, 0.3146, 0.4187],
#     #             [0.0736, 0.6305, 0.0382, 0.1002],
#     #             [0.1636, 0.6222, 0.0305, 0.0932],
#     #             [0.2575, 0.6412, 0.0268, 0.1339],
#     #             [0.1112, 0.4867, 0.2223, 0.1598],
#     #             [0.5638, 0.5943, 0.0224, 0.0700],
#     #             [0.9543, 0.4279, 0.0906, 0.1346],
#     #             [0.9757, 0.7647, 0.0477, 0.2254],
#     #             [0.9545, 0.6225, 0.0902, 0.5215]])  # Fill with your xywhn values
#     # xyxy_tensor = tensor([[2.6855e+02, 2.3815e+02, 3.1744e+02, 3.8919e+02],
#     #             [4.5151e+02, 2.2838e+02, 5.0235e+02, 3.7051e+02],
#     #             [3.4542e+02, 3.3303e+02, 3.8299e+02, 3.8769e+02],
#     #             [3.4745e+02, 3.1363e+02, 3.9527e+02, 3.8146e+02],
#     #             [2.1563e+02, 2.7933e+02, 2.5642e+02, 3.3742e+02],
#     #             [9.8916e+01, 3.2485e+02, 1.4893e+02, 4.0808e+02],
#     #             [1.4412e+02, 3.0645e+02, 1.8329e+02, 3.7016e+02],
#     #             [3.0829e+02, 3.3547e+02, 3.4325e+02, 3.8885e+02],
#     #             [1.8257e+01, 2.8253e+02, 8.2009e+01, 4.1036e+02],
#     #             [1.4526e+01, 3.2809e+02, 6.7958e+01, 4.1668e+02],
#     #             [4.5655e+02, 2.9210e+02, 4.9975e+02, 3.8319e+02],
#     #             [7.7007e+01, 2.7198e+02, 1.4960e+02, 3.9914e+02],
#     #             [2.2052e+02, 2.5442e+02, 2.5790e+02, 3.2779e+02],
#     #             [4.2744e+02, 8.2139e+01, 4.3980e+02, 1.1625e+02],
#     #             [4.0491e+02, 8.0748e+01, 4.2175e+02, 1.1639e+02],
#     #             [5.2996e+00, 2.5576e+02, 2.7058e+01, 3.2248e+02],
#     #             [2.2137e+02, 6.4403e+01, 2.5143e+02, 1.0499e+02],
#     #             [1.7572e+02, 2.4741e+02, 1.9303e+02, 3.0015e+02],
#     #             [2.7345e+01, 1.4766e+02, 2.2654e+02, 2.2859e+02],
#     #             [3.8040e-01, 1.7247e+02, 1.4301e+02, 3.0361e+02],
#     #             [3.7852e+02, 2.4126e+02, 3.8970e+02, 2.7352e+02],
#     #             [2.1117e+02, 3.3013e+02, 2.7837e+02, 3.8846e+02],
#     #             [4.6126e+02, 2.4544e+02, 4.9350e+02, 2.7213e+02],
#     #             [8.8906e+01, 2.8253e+02, 1.2353e+02, 3.2171e+02],
#     #             [2.1118e+02, 3.3769e+02, 2.5957e+02, 3.8835e+02],
#     #             [3.3936e-02, 3.2864e+02, 2.1655e+01, 4.1380e+02],
#     #             [1.0253e+02, 3.0774e+02, 1.1099e+02, 3.2689e+02],
#     #             [3.3763e+02, 2.3719e+02, 3.4867e+02, 2.6543e+02],
#     #             [2.7129e+01, 1.4729e+02, 2.2847e+02, 3.2567e+02],
#     #             [3.4873e+01, 2.4723e+02, 5.9293e+01, 2.8993e+02],
#     #             [9.4965e+01, 2.4521e+02, 1.1448e+02, 2.8491e+02],
#     #             [1.5623e+02, 2.4465e+02, 1.7338e+02, 3.0169e+02],
#     #             [5.2063e-02, 1.7328e+02, 1.4233e+02, 2.4136e+02],
#     #             [3.5366e+02, 2.3826e+02, 3.6797e+02, 2.6807e+02],
#     #             [5.8175e+02, 1.5363e+02, 6.3974e+02, 2.1098e+02],
#     #             [6.0921e+02, 2.7774e+02, 6.3973e+02, 3.7378e+02],
#     #             [5.8198e+02, 1.5411e+02, 6.3973e+02, 3.7626e+02]])  # Fill with your xyxy values

#     # data_tensor = cat((xywh_tensor, conf_tensor.unsqueeze(1), cls_tensor.unsqueeze(1)), dim=1)
#     # # Create Boxes object
#     # boxes = ultralytics.engine.results.Boxes(
#     #     # cls=cls_tensor,
#     #     # conf=conf_tensor,
#     #     # data=data_tensor,
#     #     boxes=data_tensor,
#     #     # id=None,
#     #     # is_track=False,
#     #     orig_shape=(426, 640)
#     #     # shape=(37, 6),
#     #     # xywh=xywh_tensor,
#     #     # xywhn=xywhn_tensor,
#     #     # xyxy=xyxy_tensor
#     # )
#     # img = ultralytics.engine.results.Results(
#     #     boxes=boxes,
#     #     keypoints=None,
#     #     masks=None,
#     #     names={0: 'person', 1: 'bicycle', 2: 'car', 3: 'motorcycle', 4: 'airplane', 5: 'bus', 6: 'train', 7: 'truck', 8: 'boat', 9: 'traffic light', 10: 'fire hydrant', 11: 'stop sign', 12: 'parking meter', 13: 'bench', 14: 'bird', 15: 'cat', 16: 'dog', 17: 'horse', 18: 'sheep', 19: 'cow', 20: 'elephant', 21: 'bear', 22: 'zebra', 23: 'giraffe', 24: 'backpack', 25: 'umbrella', 26: 'handbag', 27: 'tie', 28: 'suitcase', 29: 'frisbee', 30: 'skis', 31: 'snowboard', 32: 'sports ball', 33: 'kite', 34: 'baseball bat', 35: 'baseball glove', 36: 'skateboard', 37: 'surfboard', 38: 'tennis racket', 39: 'bottle', 40: 'wine glass', 41: 'cup', 42: 'fork', 43: 'knife', 44: 'spoon', 45: 'bowl', 46: 'banana', 47: 'apple', 48: 'sandwich', 49: 'orange', 50: 'broccoli', 51: 'carrot', 52: 'hot dog', 53: 'pizza', 54: 'donut', 55: 'cake', 56: 'chair', 57: 'couch', 58: 'potted plant', 59: 'bed', 60: 'dining table', 61: 'toilet', 62: 'tv', 63: 'laptop', 64: 'mouse', 65: 'remote', 66: 'keyboard', 67: 'cell phone', 68: 'microwave', 69: 'oven', 70: 'toaster', 71: 'sink', 72: 'refrigerator', 73: 'book', 74: 'clock', 75: 'vase', 76: 'scissors', 77: 'teddy bear', 78: 'hair drier', 79: 'toothbrush'},
#     #     obb=None,
#     #     orig_img=array([[[229, 226, 215],
#     #             [229, 226, 215],
#     #             [229, 226, 215],
#     #             # ...,
#     #             [196, 203, 208],
#     #             [179, 188, 192],
#     #             [177, 188, 191]],

#     #            [[234, 230, 220],
#     #             [234, 231, 220],
#     #             [235, 232, 221],
#     #             # ...,
#     #             [196, 203, 208],
#     #             [179, 188, 192],
#     #             [177, 188, 191]],

#     #            [[211, 208, 197],
#     #             [211, 208, 197],
#     #             [212, 209, 198],
#     #             # ...,
#     #             [196, 203, 208],
#     #             [179, 188, 192],
#     #             [177, 188, 191]],

#     #         #    ...,

#     #            [[110, 111, 112],
#     #             [110, 111, 112],
#     #             [109, 111, 112],
#     #             # ...,
#     #             [126, 126, 126],
#     #             [124, 124, 125],
#     #             [126, 126, 126]],

#     #            [[159, 162, 161],
#     #             [159, 162, 161],
#     #             [160, 163, 162],
#     #             # ...,
#     #             [130, 130, 130],
#     #             [125, 125, 125],
#     #             [135, 135, 135]],

#     #            [[ 68,  71,  70],
#     #             [ 68,  71,  70],
#     #             [ 69,  71,  71],
#     #             # ...,
#     #             [ 53,  52,  52],
#     #             [ 52,  52,  52],
#     #             [ 52,  52,  52]]], dtype=uint8),
#     #     # orig_shape=(426, 640),
#     #     path='image0.jpg',
#     #     probs=None,
#     #     # save_dir='runs\\detect\\predict',
#     #     speed={'preprocess': 11.493921279907227, 'inference': 338.5751247406006, 'postprocess': 1028.8593769073486}
#     # )
#     image = result_to_image(img)
#     assert image is not None
#     assert isinstance(image, Image.Image)

def test_predict():
    img = Image.new('RGB', (100, 100))
    image, boxes = predict(img, "test-key")
    assert image is not None
    assert isinstance(image, Image.Image)
    assert boxes is not None
